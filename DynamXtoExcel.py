"""
!!!SCRIPT IS WIP!!!
python script to automate dynamx to excel conversion, current dynamx application does not
support the exporting of data to excel for bimodal analysis


Prerequisites before starting: 
	- must have DynamX open with file of interest opened
	- DynamX window must be maximized
	- user must be present

Goal:
	- user click on sequence then presses hotkey 
		- hotkey automates clicking on -->views-->stacked spectral plot-->click on desired spectrum-->copy spectrum --> open excel-->paste spectrum
      	
        -test for compatibilty with hx express
		-test excel file generated by ahk can be accepted by hx express

		- could possibly implement a excel data format option for bimodal analysis
			-same script or create a different script
				ie. powershell 
	- gradually automate user clicking process
"""


"""
change settings:
required resolution:1920x1200
scale:125%
orientation:Landscape 

Usage:
1) Drag main DynamX to the top left
2) Drag spectral plots to the top right
4) Drag excel window to the bottom left. Select your starting cell (e.g. A2)
5) Select the desired peptide, scroll to the top of the spectra (or whatever the desired starting point), and then press escape (or whatever its been bound to)
6) ???
7) profit
"""


import pyautogui as pg
from pynput.keyboard import Key, Listener

pg.PAUSE = 0.075

#BOTTOM_PIXEL = (133, 133, 133) # otherwise, should be (240, 240, 240)
BOTTOM_PIXEL = (240, 240, 240)
DATA_SEQUENCE = ['down', 'down', 'down', 'down', 'enter', 'down', 'down', 'down', 'enter']
ARROW_MOVEMENT = ['right', 'right']
TOP = (1310, 200)
MIDDLE = (1315, 330)
BOTTOM = (1310, 450)

def get_data(click_pos):
    pg.click(click_pos) # get spectra
    pg.click(940, 320, button='right') # open context menu
    pg.press(DATA_SEQUENCE) # copies data
    pg.click(574, 600) # activates excel tab
    pg.hotkey('ctrl', 'shift', 'v') # paste data
    pg.press(ARROW_MOVEMENT) # move right two columns
    #print(pg.pixel(1910, 485))


def on_press(key):
    if key == Key.esc: # get data
        counter = 3
        while (pg.pixel(1910, 485) == BOTTOM_PIXEL): # check the scroll wheel pixel
            get_data(TOP)
            pg.doubleClick(1910, 500) # next spectra
            counter += 1
        get_data(TOP)
        get_data(MIDDLE)
        get_data(BOTTOM)
        print(f"Copied {counter} spectra!")

    #if key == Key.left: # align window
    #    pg.moveTo(1471, 572) # position at bottom of screen
    #    pg.dragTo(1471, 421, button='left') # drag up

listener = Listener(on_press=on_press)

listener.start()



"""
Things to look out for:

1) if the context menu changed (e.g. one of the spikes is selected), then the data sequence must change
2) if the scroll bar size changes (more/less experiments), then measuring the scroll bar pixel may no longer be accurate (currently set to 1910, 335)

"""
